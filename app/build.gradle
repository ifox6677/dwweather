apply plugin: 'com.android.application'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }
    compileSdk 34  // 编译 SDK 版本

    defaultConfig {
        applicationId "org.ifox6677.afaweather"
        minSdk 21  // 最低 SDK 版本
        targetSdk 34  // 目标 SDK 版本
        versionCode 35  // 版本号
        versionName "3.5.3"  // 版本名称

        buildConfigField "String", "BASE_URL", "\"https://api.open-meteo.com/v1/\""
        buildConfigField "String", "GITHUB_URL", "\"https://github.com/ifox6677/dwweather/\""
    }

    signingConfigs {
        release {
            storeFile = file('key.jks')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release ?: signingConfigs.debug
        }
    }

    // 解决 Kotlin 版本冲突
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin') {
                details.useVersion '1.8.10'
            }
        }
    }

    buildFeatures {
        compose = true
        buildConfig = true
    }

// build variants and stuff
    splits {
        abi {
            isEnable = true
            reset()

            // all common abis
            // include("x86_64", "x86", "armeabi-v7a", "arm64-v8a") // universal
            isUniversalApk = false
        }
    }

    flavorDimensions.add("abi")

    productFlavors {
        // universal
        create("universal") {
            isDefault = true
            dimension = "abi"
            ndk {
                abiFilters.addAll(listOf("x86", "x86_64", "armeabi-v7a", "arm64-v8a"))
            }
        }
        // arm64 only
        create("arm64") {
            dimension = "abi"
            ndk {
                abiFilters.add("arm64-v8a")
            }
        }
        // x86_64 only
        create("x86_64") {
            dimension = "abi"
            ndk {
                abiFilters.add("x86_64")
            }
        }
        // for uncommon, but non-obscure architectures
        create("uncommon_abi") {
            dimension = "abi"
            ndk {
                abiFilters.addAll(listOf("x86", "x86_64", "armeabi-v7a"))
            }
        }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.diogobernardino:williamchart:2.2'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.6.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    implementation 'org.osmdroid:osmdroid-android:6.1.18'
}
